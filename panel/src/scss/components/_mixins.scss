@use "functions" as *;
@use "variables" as *;

@use "sass:map";

@use "sass:math";

@mixin user-select-none {
    user-select: none;
}

@mixin appearance-none {
    appearance: none;
}

@mixin ellipsis {
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
}

@mixin caret($direction: bottom) {
    &::after {
        display: inline-block;
        height: 0;
        margin-left: 0.5rem;
        content: " ";
        vertical-align: $caret-width * 0.5;

        @if $direction == bottom {
            border-top: $caret-width solid;
            border-right: $caret-width solid transparent;
            border-left: $caret-width solid transparent;
        } @else if $direction == top {
            border-right: $caret-width solid transparent;
            border-bottom: $caret-width solid;
            border-left: $caret-width solid transparent;
        }
    }
}

@mixin focusring {
    outline: $focusring-width solid var(--color-focusring);
}

@mixin make-columns-globals($columns-count, $breakpoints) {
    $selectors: "";

    @each $breakpoint-name in map.keys($breakpoints) {
        @if $selectors != "" {
            $selectors: "#{$selectors}, .col-#{$breakpoint-name}";
        } @else {
            $selectors: ".col-#{$breakpoint-name}";
        }

        @for $i from 1 through $columns-count {
            $selectors: "#{$selectors}, .col-#{$breakpoint-name}-#{$i}-#{$columns-count}";
            $gcd: gcd($i, $columns-count);
            @if $gcd > 1 {
                $f: math.div($i, $gcd);
                $g: math.div($columns-count, $gcd);
                $selectors: "#{$selectors}, .col-#{$breakpoint-name}-#{$f}-#{$g}";
            }
        }
    }
    #{$selectors} {
        width: 100%;

        @media (min-width: map.get($breakpoints, "sm")) {
            padding: 0 $columns-gutter * 0.5;
        }
    }
}

@mixin make-breakpoint-columns($columns-count, $breakpoint-name) {
    .col-#{$breakpoint-name} {
        width: auto;
        max-width: 100%;
        flex: 1 0 auto;
    }

    @for $i from 1 through $columns-count {
        $selectors: ".col-#{$breakpoint-name}-#{$i}-#{$columns-count}";
        $gcd: gcd($i, $columns-count);
        @if $gcd > 1 {
            $f: math.div($i, $gcd);
            $g: math.div($columns-count, $gcd);
            $selectors: "#{$selectors}, .col-#{$breakpoint-name}-#{$f}-#{$g}";
        }
        #{$selectors} {
            max-width: math.percentage(math.div($i, $columns-count));
            flex: 0 0 math.percentage(math.div($i, $columns-count));
        }
    }
}

@mixin make-util($name, $property, $list) {
    @each $k, $v in $list {
        $suffix: "";

        @if $k != "" {
            $suffix: "-#{$k}";
        }

        .#{$name}#{$suffix} {
            #{$property}: #{$v};
        }
    }
}

@mixin checkered-background($size, $opacity) {
    $color: rgba(0, 0, 0, $opacity);
    $half: $size * 0.5;

    background-image: linear-gradient(45deg, $color 25%, transparent 25%), linear-gradient(-45deg, $color 25%, transparent 25%), linear-gradient(45deg, transparent 75%, $color 75%), linear-gradient(-45deg, transparent 75%, $color 75%);
    background-position:
        0 0,
        0 $half,
        $half (-$half),
        (-$half) 0;
    background-size: $size $size;
}
